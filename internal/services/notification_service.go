package services

import (
	"fmt"
	"remnawave-tg-shop/internal/config"
	"remnawave-tg-shop/internal/models"
	"remnawave-tg-shop/internal/repositories"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/google/uuid"
)

type NotificationService struct {
	repo             repositories.NotificationRepository
	userRepo         repositories.UserRepository
	subscriptionRepo repositories.SubscriptionRepository
	config           *config.Config
}

func NewNotificationService(
	repo repositories.NotificationRepository,
	userRepo repositories.UserRepository,
	subscriptionRepo repositories.SubscriptionRepository,
	config *config.Config,
) *NotificationService {
	return &NotificationService{
		repo:             repo,
		userRepo:         userRepo,
		subscriptionRepo: subscriptionRepo,
		config:           config,
	}
}

// CreateNotification —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
func (s *NotificationService) CreateNotification(userID *uuid.UUID, notificationType, title, message string) (*models.Notification, error) {
	notification := &models.Notification{
		UserID:  userID,
		Type:    notificationType,
		Title:   title,
		Message: message,
		IsRead:  false,
		IsSent:  false,
	}

	return notification, s.repo.Create(notification)
}

// SendNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (s *NotificationService) SendNotification(notificationID uuid.UUID, botToken string) error {
	notification, err := s.repo.GetByID(notificationID)
	if err != nil {
		return fmt.Errorf("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: %v", err)
	}

	if notification.IsSent {
		return fmt.Errorf("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	}

	// –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if notification.UserID != nil {
		user, err := s.userRepo.GetByID(*notification.UserID)
		if err != nil {
			return fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		message := fmt.Sprintf("üîî *%s*\n\n%s", notification.Title, notification.Message)
		if err := sendMessage(user.TelegramID, message, botToken); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
	}

	// –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
	return s.repo.MarkAsSent(notificationID)
}

// SendBulkNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (s *NotificationService) SendBulkNotification(notificationType, title, message string, botToken string) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	users, err := s.userRepo.GetAll(0, 0) // 0, 0 = –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	notifications := make([]models.Notification, 0, len(users))
	for _, user := range users {
		notifications = append(notifications, models.Notification{
			UserID:  &user.ID,
			Type:    notificationType,
			Title:   title,
			Message: message,
			IsRead:  false,
			IsSent:  false,
		})
	}

	// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ
	if err := s.repo.CreateBulk(notifications); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	for _, user := range users {
		messageText := fmt.Sprintf("üîî *%s*\n\n%s", title, message)
		if err := sendMessage(user.TelegramID, messageText, botToken); err != nil {
			// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã–º
			fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v\n", user.TelegramID, err)
		}
	}

	return nil
}

// SendToUsersWithActiveSubscriptions –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
func (s *NotificationService) SendToUsersWithActiveSubscriptions(notificationType, title, message string, botToken string) error {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
	users, err := s.subscriptionRepo.GetUsersWithActiveSubscriptions()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	notifications := make([]models.Notification, 0, len(users))
	for _, user := range users {
		notifications = append(notifications, models.Notification{
			UserID:  &user.ID,
			Type:    notificationType,
			Title:   title,
			Message: message,
			IsRead:  false,
			IsSent:  false,
		})
	}

	// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ
	if err := s.repo.CreateBulk(notifications); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	for _, user := range users {
		messageText := fmt.Sprintf("üîî *%s*\n\n%s", title, message)
		if err := sendMessage(user.TelegramID, messageText, botToken); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v\n", user.TelegramID, err)
		}
	}

	return nil
}

// SendToUsersWithExpiredSubscriptions –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
func (s *NotificationService) SendToUsersWithExpiredSubscriptions(notificationType, title, message string, botToken string) error {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
	users, err := s.subscriptionRepo.GetUsersWithExpiredSubscriptions()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	notifications := make([]models.Notification, 0, len(users))
	for _, user := range users {
		notifications = append(notifications, models.Notification{
			UserID:  &user.ID,
			Type:    notificationType,
			Title:   title,
			Message: message,
			IsRead:  false,
			IsSent:  false,
		})
	}

	// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ
	if err := s.repo.CreateBulk(notifications); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	for _, user := range users {
		messageText := fmt.Sprintf("üîî *%s*\n\n%s", title, message)
		if err := sendMessage(user.TelegramID, messageText, botToken); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v\n", user.TelegramID, err)
		}
	}

	return nil
}

// CheckExpiringSubscriptions –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (s *NotificationService) CheckExpiringSubscriptions(botToken string) error {
	if !s.config.Notifications.Enabled {
		return nil
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
	users, err := s.repo.GetExpiringSubscriptions(s.config.Notifications.ExpiringDaysBefore)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: %v", err)
	}

	for _, user := range users {
		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		subscriptions, err := s.subscriptionRepo.GetByUserID(user.ID)
		if err != nil {
			continue
		}

		for _, subscription := range subscriptions {
			if subscription.IsActive() {
				daysLeft := subscription.GetDaysLeft()
				if daysLeft <= s.config.Notifications.ExpiringDaysBefore && daysLeft > 0 {
					title := "‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç"
					message := fmt.Sprintf("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ %d –¥–Ω. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø.", daysLeft)

					// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
					notification := &models.Notification{
						UserID:  &user.ID,
						Type:    "subscription_expiring",
						Title:   title,
						Message: message,
						IsRead:  false,
						IsSent:  false,
					}

					if err := s.repo.Create(notification); err != nil {
						continue
					}

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
					messageText := fmt.Sprintf("üîî *%s*\n\n%s", title, message)
					if err := sendMessage(user.TelegramID, messageText, botToken); err != nil {
						fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v\n", user.TelegramID, err)
					}
				}
			}
		}
	}

	return nil
}

// GetNotificationsByUserID –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *NotificationService) GetNotificationsByUserID(userID uuid.UUID, limit, offset int) ([]models.Notification, error) {
	return s.repo.GetByUserID(userID, limit, offset)
}

// MarkAsRead –ø–æ–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
func (s *NotificationService) MarkAsRead(notificationID uuid.UUID) error {
	return s.repo.MarkAsRead(notificationID)
}

// GetUnreadCount –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *NotificationService) GetUnreadCount(userID uuid.UUID) (int64, error) {
	return s.repo.CountUnreadByUserID(userID)
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ tgbotapi
func sendMessage(chatID int64, text string, botToken string) error {
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		return err
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	_, err = bot.Send(msg)
	return err
}
