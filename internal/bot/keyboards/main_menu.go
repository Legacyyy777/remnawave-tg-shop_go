package keyboards

import (
	"fmt"
	"remnawave-tg-shop/internal/config"
	"remnawave-tg-shop/internal/models"
	"remnawave-tg-shop/internal/services"

	"github.com/mymmrac/telego"
)

// MainMenuKeyboard —Å–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
type MainMenuKeyboard struct {
	config              *config.Config
	subscriptionService services.SubscriptionService
}

// NewMainMenuKeyboard —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π MainMenuKeyboard
func NewMainMenuKeyboard(config *config.Config, subscriptionService services.SubscriptionService) *MainMenuKeyboard {
	return &MainMenuKeyboard{
		config:              config,
		subscriptionService: subscriptionService,
	}
}

// Create —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
func (k *MainMenuKeyboard) Create(user *models.User) *telego.InlineKeyboardMarkup {
	var keyboardRows [][]telego.InlineKeyboardButton
	
	// –ë–∞–ª–∞–Ω—Å
	balanceText := fmt.Sprintf("üí∞ –ë–∞–ª–∞–Ω—Å %.0f‚ÇΩ", user.Balance)
	keyboardRows = append(keyboardRows, []telego.InlineKeyboardButton{
		{
			Text:         balanceText,
			CallbackData: "balance",
		},
	})
	
	// –ö—É–ø–∏—Ç—å
	keyboardRows = append(keyboardRows, []telego.InlineKeyboardButton{
		{
			Text:         "üöÄ –ö—É–ø–∏—Ç—å",
			CallbackData: "buy_subscription",
		},
	})
	
	// –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª)
	if k.config.Trial.Enabled {
		hasUsedTrial, err := k.subscriptionService.HasUsedTrial(user.ID)
		if err == nil && !hasUsedTrial {
			keyboardRows = append(keyboardRows, []telego.InlineKeyboardButton{
				{
					Text:         "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
					CallbackData: "trial",
				},
			})
		}
	}
	
	// –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ - Mini App –∫–Ω–æ–ø–∫–∞
	keyboardRows = append(keyboardRows, []telego.InlineKeyboardButton{
		{
			Text: "üîí –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞",
			WebApp: &telego.WebAppInfo{
				URL: k.config.MiniApp.URL,
			},
		},
	})
	
	// –†–µ—Ñ–µ—Ä–∞–ª—ã –∏ –ü—Ä–æ–º–æ–∫–æ–¥
	keyboardRows = append(keyboardRows, []telego.InlineKeyboardButton{
		{
			Text:         "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—ã",
			CallbackData: "referrals",
		},
		{
			Text:         "üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥",
			CallbackData: "promo_code",
		},
	})
	
	// –Ø–∑—ã–∫ –∏ –°—Ç–∞—Ç—É—Å
	keyboardRows = append(keyboardRows, []telego.InlineKeyboardButton{
		{
			Text:         "üåê –Ø–∑—ã–∫",
			CallbackData: "language",
		},
		{
			Text:         "üìä –°—Ç–∞—Ç—É—Å",
			CallbackData: "status",
		},
	})
	
	// –ü–æ–¥–¥–µ—Ä–∂–∫–∞
	keyboardRows = append(keyboardRows, []telego.InlineKeyboardButton{
		{
			Text:         "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
			CallbackData: "support",
		},
	})

	return &telego.InlineKeyboardMarkup{
		InlineKeyboard: keyboardRows,
	}
}
