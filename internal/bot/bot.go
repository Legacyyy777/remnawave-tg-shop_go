package bot

import (
	"fmt"
	"strings"
	"time"

	"remnawave-tg-shop/internal/bot/handlers/callbacks"
	"remnawave-tg-shop/internal/bot/handlers/commands"
	"remnawave-tg-shop/internal/bot/handlers/messages"
	"remnawave-tg-shop/internal/bot/middleware"
	"remnawave-tg-shop/internal/bot/utils"
	"remnawave-tg-shop/internal/config"
	"remnawave-tg-shop/internal/logger"
	"remnawave-tg-shop/internal/models"
	"remnawave-tg-shop/internal/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gopkg.in/telebot.v3"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
type Bot struct {
	api                 *telebot.Bot
	config              *config.Config
	logger              logger.Logger
	userService         services.UserService
	subscriptionService services.SubscriptionService
	paymentService      services.PaymentService

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
	startHandler *commands.StartHandler
	helpHandler  *commands.HelpHandler
	adminHandler *commands.AdminHandler

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
	balanceHandler   *callbacks.BalanceHandler
	promoCodeHandler *callbacks.PromoCodeHandler

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	textHandler *messages.TextHandler

	// Middleware
	authMiddleware *middleware.AuthMiddleware
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
func NewBot(cfg *config.Config, log logger.Logger, userService services.UserService, subscriptionService services.SubscriptionService, paymentService services.PaymentService, promoCodeService services.IPromoCodeService, notificationService services.INotificationService, activityLogService services.IActivityLogService) (*Bot, error) {
	pref := telebot.Settings{
		Token: cfg.BotToken,
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º Long Polling –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	api, err := telebot.NewBot(pref)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot API: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	startHandler := commands.NewStartHandler(cfg, userService, subscriptionService)
	helpHandler := commands.NewHelpHandler(cfg)
	adminHandler := commands.NewAdminHandler(cfg, userService, subscriptionService, paymentService, promoCodeService, notificationService, activityLogService)
	balanceHandler := callbacks.NewBalanceHandler(cfg, userService)
	promoCodeHandler := callbacks.NewPromoCodeHandler(cfg, userService, promoCodeService, activityLogService)
	textHandler := messages.NewTextHandler(cfg)
	authMiddleware := middleware.NewAuthMiddleware(userService, log)

	bot := &Bot{
		api:                 api,
		config:              cfg,
		logger:              log,
		userService:         userService,
		subscriptionService: subscriptionService,
		paymentService:      paymentService,
		startHandler:        startHandler,
		helpHandler:         helpHandler,
		adminHandler:        adminHandler,
		balanceHandler:      balanceHandler,
		promoCodeHandler:    promoCodeHandler,
		textHandler:         textHandler,
		authMiddleware:      authMiddleware,
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	bot.setupHandlers()

	return bot, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() error {
	b.logger.Info("Starting Telegram bot with Telebot...")
	b.api.Start()
	return nil
}

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è webhook
func (b *Bot) HandleUpdate(update interface{}) error {
	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç telebot
	if tgbotUpdate, ok := update.(tgbotapi.Update); ok {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
		return b.processUpdate(tgbotUpdate)
	}
	return nil
}

// processUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
func (b *Bot) processUpdate(update tgbotapi.Update) error {
	b.logger.Info("Processing update", "update_id", update.UpdateID)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	if update.Message != nil {
		return b.handleMessage(update.Message)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries
	if update.CallbackQuery != nil {
		return b.handleCallbackQuery(update.CallbackQuery)
	}

	return nil
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(message *tgbotapi.Message) error {
	b.logger.Info("Handling message", "chat_id", message.Chat.ID, "text", message.Text)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := utils.GetOrCreateUser(message.From, b.userService)
	if err != nil {
		b.logger.Error("Failed to get user", "error", err)
		return err
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		command := message.Command()
		args := message.CommandArguments()

		switch command {
		case "start":
			return b.startHandler.Handle(message, user, args)
		case "help":
			return b.helpHandler.Handle(message, user, args)
		case "admin":
			return b.adminHandler.Handle(message, user, args)
		case "promo":
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–º–æ–∫–æ–¥–∞
			return b.promoCodeHandler.HandlePromoCodeMessage(message, user)
		default:
			return b.handleUnknownCommand(message, user, args)
		}
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	return b.textHandler.Handle(message, user)
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback queries
func (b *Bot) handleCallbackQuery(query *tgbotapi.CallbackQuery) error {
	b.logger.Info("Handling callback query", "chat_id", query.Message.Chat.ID, "data", query.Data)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := utils.GetOrCreateUser(query.From, b.userService)
	if err != nil {
		b.logger.Error("Failed to get user", "error", err)
		return err
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query
	return b.handleCallbackQueryData(query, user)
}

// handleCallbackQueryData –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ callback query
func (b *Bot) handleCallbackQueryData(query *tgbotapi.CallbackQuery, user *models.User) error {
	data := query.Data

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback'–æ–≤
	switch {
	case data == "balance":
		return b.balanceHandler.Handle(query, user)
	case data == "buy_subscription":
		return b.handleBuySubscription(query, user)
	case strings.HasPrefix(data, "subscription:"):
		return b.handleSubscriptionSelection(query, user)
	case data == "start":
		return b.handleStartCallback(query, user)
	case strings.HasPrefix(data, "promo_code:"):
		return b.promoCodeHandler.Handle(query, user)
	default:
		b.logger.Info("Unknown callback data", "data", data)
		return nil
	}
}

// handleBuySubscription –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) handleBuySubscription(query *tgbotapi.CallbackQuery, _ *models.User) error {
	text := "üöÄ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:\n\n"
	text += "üì¶ Basic (30 –¥–Ω–µ–π) - 299‚ÇΩ\n"
	text += "‚≠ê Premium (90 –¥–Ω–µ–π) - 799‚ÇΩ\n"
	text += "üíé Pro (365 –¥–Ω–µ–π) - 2499‚ÇΩ\n\n"
	text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
	keyboard := b.createSubscriptionKeyboard()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, text, keyboard, b.config.BotToken)
}

// createSubscriptionKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) createSubscriptionKeyboard() tgbotapi.InlineKeyboardMarkup {
	var keyboardRows [][]tgbotapi.InlineKeyboardButton

	// –¢–∞—Ä–∏—Ñ—ã
	keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üì¶ Basic (30 –¥–Ω–µ–π) - 299‚ÇΩ", "subscription:basic"),
	})
	keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚≠ê Premium (90 –¥–Ω–µ–π) - 799‚ÇΩ", "subscription:premium"),
	})
	keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üíé Pro (365 –¥–Ω–µ–π) - 2499‚ÇΩ", "subscription:pro"),
	})

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
	keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "start"),
	})

	return tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)
}

// handleSubscriptionSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) handleSubscriptionSelection(query *tgbotapi.CallbackQuery, user *models.User) error {
	data := query.Data
	parts := strings.Split(data, ":")
	if len(parts) < 2 {
		return b.handleBuySubscription(query, user)
	}

	plan := parts[1]

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞—Ä–∏—Ñ–∞
	var duration int
	var price float64
	var planName string

	switch plan {
	case "basic":
		duration = 30
		price = 299
		planName = "Basic"
	case "premium":
		duration = 90
		price = 799
		planName = "Premium"
	case "pro":
		duration = 365
		price = 2499
		planName = "Pro"
	default:
		return b.handleBuySubscription(query, user)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if user.Balance < price {
		text := "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n\n"
		text += fmt.Sprintf("üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: %.0f‚ÇΩ\n", user.Balance)
		text += fmt.Sprintf("üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: %.0f‚ÇΩ\n\n", price)
		text += "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "balance"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "buy_subscription"),
			),
		)

		return utils.SendMessageWithKeyboard(query.Message.Chat.ID, text, keyboard, b.config.BotToken)
	}

	// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –≤ –º–µ—Å—è—Ü—ã)
	durationMonths := duration / 30
	if durationMonths < 1 {
		durationMonths = 1
	}

	err := b.subscriptionService.CreateSubscriptionByPlan(user.ID, planName, durationMonths, int(price))
	if err != nil {
		b.logger.Error("Failed to create subscription", "error", err, "user_id", user.ID, "plan", plan)
		text := "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		return utils.SendMessage(query.Message.Chat.ID, text, b.config.BotToken)
	}

	// –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
	err = b.userService.SubtractBalance(user.ID, price)
	if err != nil {
		b.logger.Error("Failed to subtract balance", "error", err, "user_id", user.ID, "amount", price)
		text := "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		return utils.SendMessage(query.Message.Chat.ID, text, b.config.BotToken)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	text := fmt.Sprintf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ %s —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n", planName)
	text += fmt.Sprintf("üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: %d –¥–Ω–µ–π\n", duration)
	text += fmt.Sprintf("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: %.0f‚ÇΩ\n", price)
	text += "üîí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN."

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, text, keyboard, b.config.BotToken)
}

// handleStartCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
func (b *Bot) handleStartCallback(query *tgbotapi.CallbackQuery, user *models.User) error {
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
	message := &tgbotapi.Message{
		Chat: query.Message.Chat,
		From: query.From,
	}

	return b.startHandler.Handle(message, user, "")
}

// handleUnknownCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (b *Bot) handleUnknownCommand(message *tgbotapi.Message, _ *models.User, _ string) error {
	text := "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
	return utils.SendMessage(message.Chat.ID, text, b.config.BotToken)
}

// setupHandlers –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤
func (b *Bot) setupHandlers() {
	// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	b.api.Use(b.authMiddleware.Handle)

	// –ö–æ–º–∞–Ω–¥—ã
	b.api.Handle("/start", b.handleStartCommand)
	b.api.Handle("/help", b.handleHelpCommand)

	// Callback queries
	b.api.Handle("\fbalance", b.handleBalanceCallback)
	b.api.Handle("\fstart", b.handleStartCallbackTelebot)

	// Text messages
	b.api.Handle(telebot.OnText, b.handleTextMessage)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è telebot (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
func (b *Bot) handleStartCommand(c telebot.Context) error {
	user := c.Get("user").(*models.User)
	message := &tgbotapi.Message{
		Chat: &tgbotapi.Chat{ID: c.Message().Chat.ID},
		From: &tgbotapi.User{ID: c.Message().Sender.ID},
	}
	return b.startHandler.Handle(message, user, "")
}

func (b *Bot) handleHelpCommand(c telebot.Context) error {
	user := c.Get("user").(*models.User)
	message := &tgbotapi.Message{
		Chat: &tgbotapi.Chat{ID: c.Message().Chat.ID},
		From: &tgbotapi.User{ID: c.Message().Sender.ID},
	}
	return b.helpHandler.Handle(message, user, "")
}

func (b *Bot) handleBalanceCallback(c telebot.Context) error {
	user := c.Get("user").(*models.User)
	query := &tgbotapi.CallbackQuery{
		Message: &tgbotapi.Message{Chat: &tgbotapi.Chat{ID: c.Message().Chat.ID}},
		From:    &tgbotapi.User{ID: c.Message().Sender.ID},
		Data:    c.Callback().Data,
	}
	return b.balanceHandler.Handle(query, user)
}

func (b *Bot) handleStartCallbackTelebot(c telebot.Context) error {
	user := c.Get("user").(*models.User)
	query := &tgbotapi.CallbackQuery{
		Message: &tgbotapi.Message{Chat: &tgbotapi.Chat{ID: c.Message().Chat.ID}},
		From:    &tgbotapi.User{ID: c.Message().Sender.ID},
		Data:    c.Callback().Data,
	}
	return b.handleStartCallback(query, user)
}

func (b *Bot) handleTextMessage(c telebot.Context) error {
	user := c.Get("user").(*models.User)
	message := &tgbotapi.Message{
		Chat: &tgbotapi.Chat{ID: c.Message().Chat.ID},
		From: &tgbotapi.User{ID: c.Message().Sender.ID},
		Text: c.Message().Text,
	}
	return b.textHandler.Handle(message, user)
}
