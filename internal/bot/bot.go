package bot

import (
	"fmt"
	"strings"
	"time"

	"remnawave-tg-shop/internal/config"
	"remnawave-tg-shop/internal/logger"
	"remnawave-tg-shop/internal/models"
	"remnawave-tg-shop/internal/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
type Bot struct {
	api            *tgbotapi.BotAPI
	config         *config.Config
	logger         logger.Logger
	userService    services.UserService
	subscriptionService services.SubscriptionService
	paymentService services.PaymentService
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
func NewBot(cfg *config.Config, log logger.Logger, userService services.UserService, subscriptionService services.SubscriptionService, paymentService services.PaymentService) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(cfg.BotToken)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot API: %w", err)
	}

	api.Debug = cfg.LogLevel == "debug"

	bot := &Bot{
		api:                api,
		config:             cfg,
		logger:             log,
		userService:        userService,
		subscriptionService: subscriptionService,
		paymentService:     paymentService,
	}

	return bot, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() error {
	b.logger.Info("Starting Telegram bot...")

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL
	if b.config.BotWebhookURL != "" {
		return b.startWebhook()
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ polling
	return b.startPolling()
}

// startWebhook –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook
func (b *Bot) startWebhook() error {
	webhook, err := tgbotapi.NewWebhook(b.config.BotWebhookURL)
	if err != nil {
		return fmt.Errorf("failed to create webhook: %w", err)
	}

	_, err = b.api.Request(webhook)
	if err != nil {
		return fmt.Errorf("failed to set webhook: %w", err)
	}

	info, err := b.api.GetWebhookInfo()
	if err != nil {
		return fmt.Errorf("failed to get webhook info: %w", err)
	}

	if info.LastErrorDate != 0 {
		b.logger.Error("Webhook error", "message", info.LastErrorMessage)
	}

	b.logger.Info("Bot started in webhook mode", "url", b.config.BotWebhookURL)
	return nil
}

// startPolling –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
func (b *Bot) startPolling() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	b.logger.Info("Bot started in polling mode")

	for update := range updates {
		go b.handleUpdate(update)
	}

	return nil
}

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
func (b *Bot) HandleUpdate(update tgbotapi.Update) error {
	return b.handleUpdate(update)
}

// handleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
func (b *Bot) handleUpdate(update tgbotapi.Update) error {
	if update.Message != nil {
		b.handleMessage(update.Message)
	} else if update.CallbackQuery != nil {
		b.handleCallbackQuery(update.CallbackQuery)
	}
	return nil
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	b.logger.Info("Received message", "chat_id", message.Chat.ID, "text", message.Text, "from", message.From.UserName)
	
	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if message.Date < int(time.Now().Unix()-300) {
		b.logger.Info("Ignoring old message", "date", message.Date, "now", time.Now().Unix())
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := b.userService.CreateOrGetUser(
		message.From.ID,
		message.From.UserName,
		message.From.FirstName,
		message.From.LastName,
		message.From.LanguageCode,
	)
	if err != nil {
		b.logger.Error("Failed to create/get user", "error", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if user.IsBlocked {
		b.sendMessage(message.Chat.ID, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		b.handleCommand(message, user)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	b.handleTextMessage(message, user)
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
func (b *Bot) handleCommand(message *tgbotapi.Message, user *models.User) {
	command := message.Command()
	args := message.CommandArguments()

	switch command {
	case "start":
		b.handleStartCommand(message, user, args)
	case "help":
		b.handleHelpCommand(message, user)
	case "balance":
		b.handleBalanceCommand(message, user)
	case "subscriptions":
		b.handleSubscriptionsCommand(message, user)
	case "referrals":
		b.handleReferralsCommand(message, user)
	case "admin":
		b.handleAdminCommand(message, user)
	default:
		b.sendMessage(message.Chat.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
	}
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStartCommand(message *tgbotapi.Message, user *models.User, args string) {
	b.logger.Info("Handling start command", "chat_id", message.Chat.ID, "user_id", user.ID)
	
	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	username := user.GetDisplayName()
	text := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %süëã\n\n", username)
	text += "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?"

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
	if args != "" {
		referralUser, err := b.userService.GetUserByReferralCode(args)
		if err == nil && referralUser != nil && referralUser.ID != user.ID {
			// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
			user.ReferredBy = &referralUser.ID
			b.userService.UpdateUser(user)
			
			// –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
			b.userService.AddBalance(referralUser.ID, 50) // 50 —Ä—É–±–ª–µ–π –±–æ–Ω—É—Å
			
			text += "\n\nüéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n"
			text += "üí∞ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ 50 —Ä—É–±–ª–µ–π."
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å –±–∞–ª–∞–Ω—Å–æ–º
	balanceText := fmt.Sprintf("–ë–∞–ª–∞–Ω—Å %.0f‚ÇΩ", user.Balance)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ " + balanceText, "balance"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üöÄ –ö—É–ø–∏—Ç—å", "buy_subscription"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîí –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", "my_subscriptions"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üéÅ –†–µ—Ñ–µ—Ä–∞–ª—ã", "referrals"),
			tgbotapi.NewInlineKeyboardButtonData("üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥", "promo_code"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üåê –Ø–∑—ã–∫", "language"),
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç—É—Å", "status"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support"),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// handleHelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (b *Bot) handleHelpCommand(message *tgbotapi.Message, user *models.User) {
	text := "‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
	text += "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
	text += "/start - üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
	text += "/balance - üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å\n"
	text += "/subscriptions - üì± –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
	text += "/referrals - üë• –†–µ—Ñ–µ—Ä–∞–ª—ã\n"
	text += "/help - ‚ùì –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
	text += "üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
	text += "1. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ Stars, Tribute –∏–ª–∏ –ÆKassa\n"
	text += "2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω\n"
	text += "3. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É\n"
	text += "4. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN\n\n"
	text += "üÜò –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

	b.sendMessage(message.Chat.ID, text)
}

// handleBalanceCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /balance
func (b *Bot) handleBalanceCommand(message *tgbotapi.Message, user *models.User) {
	text := fmt.Sprintf("üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: %.2f ‚ÇΩ\n\n", user.Balance)
	text += "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚≠ê Telegram Stars", "payment_stars"),
			tgbotapi.NewInlineKeyboardButtonData("üíé Tribute", "payment_tribute"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ÆKassa", "payment_yookassa"),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// handleSubscriptionsCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /subscriptions
func (b *Bot) handleSubscriptionsCommand(message *tgbotapi.Message, user *models.User) {
	subscriptions, err := b.subscriptionService.GetUserSubscriptions(user.ID)
	if err != nil {
		b.logger.Error("Failed to get user subscriptions", "error", err)
		b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫.")
		return
	}

	if len(subscriptions) == 0 {
		text := "üì± –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n"
		text += "üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:"

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			[]tgbotapi.InlineKeyboardButton{
				tgbotapi.NewInlineKeyboardButtonData("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "buy_subscription"),
			},
		)

		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		msg.ReplyMarkup = keyboard
		b.api.Send(msg)
		return
	}

	text := "üì± –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
	for i, sub := range subscriptions {
		status := "üü¢ –ê–∫—Ç–∏–≤–Ω–∞"
		if !sub.IsActive() {
			status = "üî¥ " + sub.GetStatusText()
		}

		text += fmt.Sprintf("%d. %s - %s\n", i+1, sub.ServerName, sub.PlanName)
		text += fmt.Sprintf("   –°—Ç–∞—Ç—É—Å: %s\n", status)
		text += fmt.Sprintf("   –ò—Å—Ç–µ–∫–∞–µ—Ç: %s\n", sub.ExpiresAt.Format("02.01.2006 15:04"))
		if sub.IsActive() {
			text += fmt.Sprintf("   –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: %d\n", sub.GetDaysLeft())
		}
		text += "\n"
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "buy_subscription"),
		},
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// handleReferralsCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /referrals
func (b *Bot) handleReferralsCommand(message *tgbotapi.Message, user *models.User) {
	referrals, err := b.userService.GetReferrals(user.ID)
	if err != nil {
		b.logger.Error("Failed to get referrals", "error", err)
		b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")
		return
	}

	text := "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
	text += fmt.Sprintf("üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n")
	text += fmt.Sprintf("https://t.me/%s?start=%s\n\n", b.api.Self.UserName, user.ReferralCode)
	text += fmt.Sprintf("üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: %d\n", len(referrals))
	text += "üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 50 ‚ÇΩ –±–æ–Ω—É—Å–∞\n\n"

	if len(referrals) > 0 {
		text += "üìã –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n"
		for i, ref := range referrals {
			text += fmt.Sprintf("%d. %s\n", i+1, ref.GetDisplayName())
		}
	}

	b.sendMessage(message.Chat.ID, text)
}

// handleAdminCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin
func (b *Bot) handleAdminCommand(message *tgbotapi.Message, user *models.User) {
	b.logger.Info("Admin command received", 
		"user_telegram_id", user.TelegramID, 
		"user_id", user.ID,
		"username", user.Username)
	
	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	b.logger.Info("Config debug", 
		"admin_telegram_id", b.config.Admin.TelegramID,
		"admin_telegram_id_zero", b.config.Admin.TelegramID == 0)
		
	if !b.userService.IsAdmin(user.TelegramID) {
		b.sendMessage(message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		return
	}

	text := "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
	text += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
	text += "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: [–∑–∞–≥—Ä—É–∑–∫–∞...]\n"
	text += "üì± –ü–æ–¥–ø–∏—Å–∫–∏: [–∑–∞–≥—Ä—É–∑–∫–∞...]\n"
	text += "üí∞ –î–æ—Ö–æ–¥: [–∑–∞–≥—Ä—É–∑–∫–∞...]\n\n"
	text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "admin_users"),
			tgbotapi.NewInlineKeyboardButtonData("üì± –ü–æ–¥–ø–∏—Å–∫–∏", "admin_subscriptions"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –ü–ª–∞—Ç–µ–∂–∏", "admin_payments"),
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats"),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// handleTextMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleTextMessage(message *tgbotapi.Message, user *models.User) {
	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	// –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∏—Å–∫ –∏ —Ç.–¥.
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
func (b *Bot) handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	data := query.Data
	userID := query.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := b.userService.GetUser(int64(userID))
	if err != nil || user == nil {
		b.answerCallbackQuery(query.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if user.IsBlocked {
		b.answerCallbackQuery(query.ID, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –¥–∞–Ω–Ω—ã–µ
	switch {
	case data == "balance":
		b.handleBalanceCallback(query, user)
	case data == "buy_subscription":
		b.handleBuySubscriptionCallback(query, user)
	case data == "my_subscriptions":
		b.handleMySubscriptionsCallback(query, user)
	case data == "referrals":
		b.handleReferralsCallback(query, user)
	case data == "promo_code":
		b.handlePromoCodeCallback(query, user)
	case data == "language":
		b.handleLanguageCallback(query, user)
	case data == "status":
		b.handleStatusCallback(query, user)
	case data == "support":
		b.handleSupportCallback(query, user)
	case data == "start":
		b.handleStartCallback(query, user)
	case strings.HasPrefix(data, "payment_"):
		b.handlePaymentCallback(query, user, data)
	case strings.HasPrefix(data, "admin_"):
		b.handleAdminCallback(query, user, data)
	default:
		b.answerCallbackQuery(query.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
	}
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (b *Bot) sendMessage(chatID int64, text string) {
	b.logger.Info("Sending message", "chat_id", chatID, "text", text)
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = tgbotapi.ModeHTML
	_, err := b.api.Send(msg)
	if err != nil {
		b.logger.Error("Failed to send message", "error", err, "chat_id", chatID)
	} else {
		b.logger.Info("Message sent successfully", "chat_id", chatID)
	}
}

// answerCallbackQuery –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query
func (b *Bot) answerCallbackQuery(callbackQueryID string, text string) {
	callback := tgbotapi.NewCallback(callbackQueryID, text)
	_, err := b.api.Request(callback)
	if err != nil {
		b.logger.Error("Failed to answer callback query", "error", err)
	}
}

// editMessage —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *Bot) editMessage(chatID int64, messageID int, text string, keyboard *tgbotapi.InlineKeyboardMarkup) {
	msg := tgbotapi.NewEditMessageText(chatID, messageID, text)
	msg.ParseMode = tgbotapi.ModeHTML
	if keyboard != nil {
		msg.ReplyMarkup = keyboard
	}
	_, err := b.api.Send(msg)
	if err != nil {
		b.logger.Error("Failed to edit message", "error", err)
	}
}

// handleBalanceCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
func (b *Bot) handleBalanceCallback(query *tgbotapi.CallbackQuery, user *models.User) {
	text := fmt.Sprintf("üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: %.2f ‚ÇΩ\n\n", user.Balance)
	text += "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚≠ê Telegram Stars", "payment_stars"),
			tgbotapi.NewInlineKeyboardButtonData("üíé Tribute", "payment_tribute"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ÆKassa", "payment_yookassa"),
		),
	)

	b.editMessage(query.Message.Chat.ID, query.Message.MessageID, text, &keyboard)
	b.answerCallbackQuery(query.ID, "üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
}

// handleBuySubscriptionCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) handleBuySubscriptionCallback(query *tgbotapi.CallbackQuery, user *models.User) {
	text := "üõí –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:\n\n"
	text += "1. üá∫üá∏ –°–®–ê - 299‚ÇΩ/–º–µ—Å—è—Ü\n"
	text += "2. üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è - 399‚ÇΩ/–º–µ—Å—è—Ü\n"
	text += "3. üáØüáµ –Ø–ø–æ–Ω–∏—è - 499‚ÇΩ/–º–µ—Å—è—Ü\n\n"
	text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá∫üá∏ –°–®–ê", "server_1"),
			tgbotapi.NewInlineKeyboardButtonData("üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è", "server_2"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üáØüáµ –Ø–ø–æ–Ω–∏—è", "server_3"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "start"),
		),
	)

	b.editMessage(query.Message.Chat.ID, query.Message.MessageID, text, &keyboard)
	b.answerCallbackQuery(query.ID, "üõí –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä")
}

// handleMySubscriptionsCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –º–æ–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
func (b *Bot) handleMySubscriptionsCallback(query *tgbotapi.CallbackQuery, user *models.User) {
	subscriptions, err := b.subscriptionService.GetUserSubscriptions(user.ID)
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫")
		return
	}

	if len(subscriptions) == 0 {
		text := "üì± –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n"
		text += "üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:"

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			[]tgbotapi.InlineKeyboardButton{
				tgbotapi.NewInlineKeyboardButtonData("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "buy_subscription"),
			},
		)

		b.editMessage(query.Message.Chat.ID, query.Message.MessageID, text, &keyboard)
		b.answerCallbackQuery(query.ID, "üì± –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return
	}

	text := "üì± –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
	for i, sub := range subscriptions {
		status := "üü¢ –ê–∫—Ç–∏–≤–Ω–∞"
		if !sub.IsActive() {
			status = "üî¥ " + sub.GetStatusText()
		}

		text += fmt.Sprintf("%d. %s - %s\n", i+1, sub.ServerName, sub.PlanName)
		text += fmt.Sprintf("   –°—Ç–∞—Ç—É—Å: %s\n", status)
		text += fmt.Sprintf("   –ò—Å—Ç–µ–∫–∞–µ—Ç: %s\n", sub.ExpiresAt.Format("02.01.2006 15:04"))
		if sub.IsActive() {
			text += fmt.Sprintf("   –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: %d\n", sub.GetDaysLeft())
		}
		text += "\n"
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "buy_subscription"),
		},
	)

	b.editMessage(query.Message.Chat.ID, query.Message.MessageID, text, &keyboard)
	b.answerCallbackQuery(query.ID, "üì± –ü–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
}

// handleReferralsCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
func (b *Bot) handleReferralsCallback(query *tgbotapi.CallbackQuery, user *models.User) {
	referrals, err := b.userService.GetReferrals(user.ID)
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
		return
	}

	text := "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
	text += fmt.Sprintf("üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n")
	text += fmt.Sprintf("https://t.me/%s?start=%s\n\n", b.api.Self.UserName, user.ReferralCode)
	text += fmt.Sprintf("üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: %d\n", len(referrals))
	text += "üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 50 ‚ÇΩ –±–æ–Ω—É—Å–∞\n\n"

	if len(referrals) > 0 {
		text += "üìã –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n"
		for i, ref := range referrals {
			text += fmt.Sprintf("%d. %s\n", i+1, ref.GetDisplayName())
		}
	}

	b.editMessage(query.Message.Chat.ID, query.Message.MessageID, text, nil)
	b.answerCallbackQuery(query.ID, "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
}

// handlePaymentCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
func (b *Bot) handlePaymentCallback(query *tgbotapi.CallbackQuery, user *models.User, data string) {
	switch data {
	case "payment_stars":
		b.answerCallbackQuery(query.ID, "‚≠ê –ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Stars –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
	case "payment_tribute":
		b.answerCallbackQuery(query.ID, "üíé –ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Tribute –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
	case "payment_yookassa":
		b.answerCallbackQuery(query.ID, "üí≥ –ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
	default:
		b.answerCallbackQuery(query.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã")
	}
}

// handleAdminCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
func (b *Bot) handleAdminCallback(query *tgbotapi.CallbackQuery, user *models.User, data string) {
	switch data {
	case "admin_users":
		b.answerCallbackQuery(query.ID, "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
	case "admin_subscriptions":
		b.answerCallbackQuery(query.ID, "üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
	case "admin_payments":
		b.answerCallbackQuery(query.ID, "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
	case "admin_stats":
		b.answerCallbackQuery(query.ID, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
	default:
		b.answerCallbackQuery(query.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
	}
}

// handlePromoCodeCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
func (b *Bot) handlePromoCodeCallback(query *tgbotapi.CallbackQuery, user *models.User) {
	text := "üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã\n\n"
	text += "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –∏–ª–∏ –±–æ–Ω—É—Å–∞.\n\n"
	text += "üí° –ü—Ä–æ–º–æ–∫–æ–¥—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å:\n"
	text += "‚Ä¢ –û—Ç –¥—Ä—É–∑–µ–π\n"
	text += "‚Ä¢ –í —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö\n"
	text += "‚Ä¢ –ó–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö\n\n"
	text += "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —á–∞—Ç."

	b.editMessage(query.Message.Chat.ID, query.Message.MessageID, text, nil)
	b.answerCallbackQuery(query.ID, "üéüÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥")
}

// handleLanguageCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
func (b *Bot) handleLanguageCallback(query *tgbotapi.CallbackQuery, user *models.User) {
	text := "üåê –í—ã–±–æ—Ä —è–∑—ã–∫–∞\n\n"
	text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:\n\n"
	text += "üá∑üá∫ –†—É—Å—Å–∫–∏–π (—Ç–µ–∫—É—â–∏–π)\n"
	text += "üá∫üá∏ English\n"
	text += "üá©üá™ Deutsch\n"
	text += "üá´üá∑ Fran√ßais\n\n"
	text += "–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö."

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "lang_ru"),
			tgbotapi.NewInlineKeyboardButtonData("üá∫üá∏ English", "lang_en"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá©üá™ Deutsch", "lang_de"),
			tgbotapi.NewInlineKeyboardButtonData("üá´üá∑ Fran√ßais", "lang_fr"),
		),
	)

	b.editMessage(query.Message.Chat.ID, query.Message.MessageID, text, &keyboard)
	b.answerCallbackQuery(query.ID, "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫")
}

// handleStatusCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
func (b *Bot) handleStatusCallback(query *tgbotapi.CallbackQuery, user *models.User) {
	text := "üìä –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
	text += fmt.Sprintf("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n", user.GetDisplayName())
	text += fmt.Sprintf("üí∞ –ë–∞–ª–∞–Ω—Å: %.2f ‚ÇΩ\n", user.Balance)
	text += fmt.Sprintf("üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: %s\n", user.CreatedAt.Format("02.01.2006"))
	text += fmt.Sprintf("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: %s\n", user.ReferralCode)
	
	if user.ReferredBy != nil {
		text += "üéÅ –ü–æ–ª—É—á–µ–Ω –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n"
	}
	
	text += "\nüì± –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
	subscriptions, err := b.subscriptionService.GetUserSubscriptions(user.ID)
	if err == nil && len(subscriptions) > 0 {
		for _, sub := range subscriptions {
			if sub.IsActive() {
				text += fmt.Sprintf("‚Ä¢ %s - %s (–¥–æ %s)\n", sub.ServerName, sub.PlanName, sub.ExpiresAt.Format("02.01.2006"))
			}
		}
	} else {
		text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"
	}

	b.editMessage(query.Message.Chat.ID, query.Message.MessageID, text, nil)
	b.answerCallbackQuery(query.ID, "üìä –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∂–µ–Ω")
}

// handleSupportCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
func (b *Bot) handleSupportCallback(query *tgbotapi.CallbackQuery, user *models.User) {
	text := "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
	text += "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n"
	text += "üìß Email: support@remnawave.com\n"
	text += "üí¨ Telegram: @remnawave_support\n"
	text += "üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7\n\n"
	text += "üìã –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
	text += "‚Ä¢ –ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?\n"
	text += "‚Ä¢ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN?\n"
	text += "‚Ä¢ –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n"
	text += "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º\n\n"
	text += "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!"

	b.editMessage(query.Message.Chat.ID, query.Message.MessageID, text, nil)
	b.answerCallbackQuery(query.ID, "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å")
}

// handleStartCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (b *Bot) handleStartCallback(query *tgbotapi.CallbackQuery, user *models.User) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	username := user.GetDisplayName()
	text := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %süëã\n\n", username)
	text += "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?"

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å –±–∞–ª–∞–Ω—Å–æ–º
	balanceText := fmt.Sprintf("–ë–∞–ª–∞–Ω—Å %.0f‚ÇΩ", user.Balance)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ " + balanceText, "balance"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üöÄ –ö—É–ø–∏—Ç—å", "buy_subscription"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîí –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", "my_subscriptions"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üéÅ –†–µ—Ñ–µ—Ä–∞–ª—ã", "referrals"),
			tgbotapi.NewInlineKeyboardButtonData("üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥", "promo_code"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üåê –Ø–∑—ã–∫", "language"),
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç—É—Å", "status"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support"),
		),
	)

	b.editMessage(query.Message.Chat.ID, query.Message.MessageID, text, &keyboard)
	b.answerCallbackQuery(query.ID, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
}
