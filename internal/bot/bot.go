package bot

import (
	"fmt"
	"strings"
	"time"

	"remnawave-tg-shop/internal/bot/handlers/callbacks"
	"remnawave-tg-shop/internal/bot/handlers/commands"
	"remnawave-tg-shop/internal/bot/handlers/messages"
	"remnawave-tg-shop/internal/bot/middleware"
	"remnawave-tg-shop/internal/bot/utils"
	"remnawave-tg-shop/internal/config"
	"remnawave-tg-shop/internal/logger"
	"remnawave-tg-shop/internal/models"
	"remnawave-tg-shop/internal/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gopkg.in/telebot.v3"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
type Bot struct {
	api                 *telebot.Bot
	config              *config.Config
	logger              logger.Logger
	userService         services.UserService
	subscriptionService services.SubscriptionService
	paymentService      services.PaymentService

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
	startHandler *commands.StartHandler
	helpHandler  *commands.HelpHandler
	adminHandler *commands.AdminHandler

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
	balanceHandler   *callbacks.BalanceHandler
	promoCodeHandler *callbacks.PromoCodeHandler

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	textHandler *messages.TextHandler

	// Middleware
	authMiddleware *middleware.AuthMiddleware
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
func NewBot(cfg *config.Config, log logger.Logger, userService services.UserService, subscriptionService services.SubscriptionService, paymentService services.PaymentService, promoCodeService services.IPromoCodeService, notificationService services.INotificationService, activityLogService services.IActivityLogService) (*Bot, error) {
	pref := telebot.Settings{
		Token: cfg.BotToken,
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º Long Polling –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	api, err := telebot.NewBot(pref)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot API: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	startHandler := commands.NewStartHandler(cfg, userService, subscriptionService)
	helpHandler := commands.NewHelpHandler(cfg)
	adminHandler := commands.NewAdminHandler(cfg, userService, subscriptionService, paymentService, promoCodeService, notificationService, activityLogService)
	balanceHandler := callbacks.NewBalanceHandler(cfg, userService)
	promoCodeHandler := callbacks.NewPromoCodeHandler(cfg, userService, promoCodeService, activityLogService)
	textHandler := messages.NewTextHandler(cfg)
	authMiddleware := middleware.NewAuthMiddleware(userService, log)

	bot := &Bot{
		api:                 api,
		config:              cfg,
		logger:              log,
		userService:         userService,
		subscriptionService: subscriptionService,
		paymentService:      paymentService,
		startHandler:        startHandler,
		helpHandler:         helpHandler,
		adminHandler:        adminHandler,
		balanceHandler:      balanceHandler,
		promoCodeHandler:    promoCodeHandler,
		textHandler:         textHandler,
		authMiddleware:      authMiddleware,
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	bot.setupHandlers()

	return bot, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() error {
	b.logger.Info("Starting Telegram bot with Telebot...")
	b.api.Start()
	return nil
}

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è webhook
func (b *Bot) HandleUpdate(update interface{}) error {
	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç telebot
	if tgbotUpdate, ok := update.(tgbotapi.Update); ok {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
		return b.processUpdate(tgbotUpdate)
	}
	return nil
}

// processUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
func (b *Bot) processUpdate(update tgbotapi.Update) error {
	b.logger.Info("Processing update", "update_id", update.UpdateID)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	if update.Message != nil {
		return b.handleMessage(update.Message)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries
	if update.CallbackQuery != nil {
		return b.handleCallbackQuery(update.CallbackQuery)
	}

	return nil
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(message *tgbotapi.Message) error {
	b.logger.Info("Handling message", "chat_id", message.Chat.ID, "text", message.Text)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := utils.GetOrCreateUser(message.From, b.userService)
	if err != nil {
		b.logger.Error("Failed to get user", "error", err)
		return err
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		command := message.Command()
		args := message.CommandArguments()

		switch command {
		case "start":
			return b.startHandler.Handle(message, user, args)
		case "help":
			return b.helpHandler.Handle(message, user, args)
		case "admin":
			return b.adminHandler.Handle(message, user, args)
		case "promo":
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–º–æ–∫–æ–¥–∞
			return b.promoCodeHandler.HandlePromoCodeMessage(message, user)
		default:
			return b.handleUnknownCommand(message, user, args)
		}
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	return b.textHandler.Handle(message, user)
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback queries
func (b *Bot) handleCallbackQuery(query *tgbotapi.CallbackQuery) error {
	b.logger.Info("Handling callback query", "chat_id", query.Message.Chat.ID, "data", query.Data)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := utils.GetOrCreateUser(query.From, b.userService)
	if err != nil {
		b.logger.Error("Failed to get user", "error", err)
		return err
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query
	return b.handleCallbackQueryData(query, user)
}

// handleCallbackQueryData –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ callback query
func (b *Bot) handleCallbackQueryData(query *tgbotapi.CallbackQuery, user *models.User) error {
	data := query.Data

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback'–æ–≤
	switch {
	case data == "balance":
		return b.balanceHandler.Handle(query, user)
	case data == "buy_subscription":
		return b.handleBuySubscription(query, user)
	case strings.HasPrefix(data, "subscription:"):
		return b.handleSubscriptionSelection(query, user)
	case data == "payment_tribute":
		return b.handleTributePayment(query, user)
	case data == "payment_stars":
		return b.handleStarsPayment(query, user)
	case data == "payment_yookassa":
		return b.handleYooKassaPayment(query, user)
	case data == "payment_cryptopay":
		return b.handleCryptoPayPayment(query, user)
	case data == "start":
		return b.handleStartCallback(query, user)
	case data == "support":
		return b.handleSupport(query, user)
	case data == "language":
		return b.handleLanguage(query, user)
	case data == "status":
		return b.handleStatus(query, user)
	case data == "referrals":
		return b.handleReferrals(query, user)
	case data == "trial":
		return b.handleTrial(query, user)
	case strings.HasPrefix(data, "admin:"):
		return b.handleAdminCallback(query, user)
	case strings.HasPrefix(data, "promo_code:"):
		return b.promoCodeHandler.Handle(query, user)
	default:
		b.logger.Info("Unknown callback data", "data", data)
		return nil
	}
}

// handleBuySubscription –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) handleBuySubscription(query *tgbotapi.CallbackQuery, _ *models.User) error {
	text := "üöÄ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:\n\n"
	text += "üì¶ Basic (30 –¥–Ω–µ–π) - 299‚ÇΩ\n"
	text += "‚≠ê Premium (90 –¥–Ω–µ–π) - 799‚ÇΩ\n"
	text += "üíé Pro (365 –¥–Ω–µ–π) - 2499‚ÇΩ\n\n"
	text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
	keyboard := b.createSubscriptionKeyboard()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, text, keyboard, b.config.BotToken)
}

// createMainMenuKeyboard —Å–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (b *Bot) createMainMenuKeyboard(user *models.User) tgbotapi.InlineKeyboardMarkup {
	var keyboardRows [][]tgbotapi.InlineKeyboardButton

	// –ë–∞–ª–∞–Ω—Å
	balanceText := fmt.Sprintf("üí∞ –ë–∞–ª–∞–Ω—Å %.0f‚ÇΩ", user.Balance)
	keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData(balanceText, "balance"),
	})

	// –ö—É–ø–∏—Ç—å
	keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üöÄ –ö—É–ø–∏—Ç—å", "buy_subscription"),
	})

	// –†–µ—Ñ–µ—Ä–∞–ª—ã –∏ –ü—Ä–æ–º–æ–∫–æ–¥
	keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üéÅ –†–µ—Ñ–µ—Ä–∞–ª—ã", "referrals"),
		tgbotapi.NewInlineKeyboardButtonData("üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥", "promo_code:menu"),
	})

	// –Ø–∑—ã–∫ –∏ –°—Ç–∞—Ç—É—Å
	keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üåê –Ø–∑—ã–∫", "language"),
		tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç—É—Å", "status"),
	})

	// –ü–æ–¥–¥–µ—Ä–∂–∫–∞
	keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support"),
	})

	return tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)
}

// createSubscriptionKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) createSubscriptionKeyboard() tgbotapi.InlineKeyboardMarkup {
	var keyboardRows [][]tgbotapi.InlineKeyboardButton

	// –¢–∞—Ä–∏—Ñ—ã
	keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üì¶ Basic (30 –¥–Ω–µ–π) - 299‚ÇΩ", "subscription:basic"),
	})
	keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚≠ê Premium (90 –¥–Ω–µ–π) - 799‚ÇΩ", "subscription:premium"),
	})
	keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üíé Pro (365 –¥–Ω–µ–π) - 2499‚ÇΩ", "subscription:pro"),
	})

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
	keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "start"),
	})

	return tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)
}

// handleSubscriptionSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) handleSubscriptionSelection(query *tgbotapi.CallbackQuery, user *models.User) error {
	data := query.Data
	parts := strings.Split(data, ":")
	if len(parts) < 2 {
		return b.handleBuySubscription(query, user)
	}

	plan := parts[1]

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞—Ä–∏—Ñ–∞
	var duration int
	var price float64
	var planName string

	switch plan {
	case "basic":
		duration = 30
		price = 299
		planName = "Basic"
	case "premium":
		duration = 90
		price = 799
		planName = "Premium"
	case "pro":
		duration = 365
		price = 2499
		planName = "Pro"
	default:
		return b.handleBuySubscription(query, user)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if user.Balance < price {
		text := "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n\n"
		text += fmt.Sprintf("üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: %.0f‚ÇΩ\n", user.Balance)
		text += fmt.Sprintf("üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: %.0f‚ÇΩ\n\n", price)
		text += "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "balance"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "buy_subscription"),
			),
		)

		return utils.SendMessageWithKeyboard(query.Message.Chat.ID, text, keyboard, b.config.BotToken)
	}

	// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –≤ –º–µ—Å—è—Ü—ã)
	durationMonths := duration / 30
	if durationMonths < 1 {
		durationMonths = 1
	}

	err := b.subscriptionService.CreateSubscriptionByPlan(user.ID, planName, durationMonths, int(price))
	if err != nil {
		b.logger.Error("Failed to create subscription", "error", err, "user_id", user.ID, "plan", plan)
		text := "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		return utils.SendMessage(query.Message.Chat.ID, text, b.config.BotToken)
	}

	// –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
	err = b.userService.SubtractBalance(user.ID, price)
	if err != nil {
		b.logger.Error("Failed to subtract balance", "error", err, "user_id", user.ID, "amount", price)
		text := "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		return utils.SendMessage(query.Message.Chat.ID, text, b.config.BotToken)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	text := fmt.Sprintf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ %s —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n", planName)
	text += fmt.Sprintf("üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: %d –¥–Ω–µ–π\n", duration)
	text += fmt.Sprintf("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: %.0f‚ÇΩ\n", price)
	text += "üîí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN."

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, text, keyboard, b.config.BotToken)
}

// handleTributePayment –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Tribute
func (b *Bot) handleTributePayment(query *tgbotapi.CallbackQuery, _ *models.User) error {
	text := "üíé *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Tribute*\n\n"
	text += "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n"
	text += "üîó " + b.config.Payments.Tribute.AppURL + "\n\n"
	text += "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üíé –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", b.config.Payments.Tribute.AppURL),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "balance"),
		),
	)

	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, text, keyboard, b.config.BotToken)
}

// handleStarsPayment –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram Stars
func (b *Bot) handleStarsPayment(query *tgbotapi.CallbackQuery, _ *models.User) error {
	text := "‚≠ê *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Stars*\n\n"
	text += "–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Stars –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
	text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã."

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "balance"),
		),
	)

	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, text, keyboard, b.config.BotToken)
}

// handleYooKassaPayment –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
func (b *Bot) handleYooKassaPayment(query *tgbotapi.CallbackQuery, _ *models.User) error {
	text := "üí≥ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ÆKassa*\n\n"
	text += "–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ÆKassa –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
	text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã."

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "balance"),
		),
	)

	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, text, keyboard, b.config.BotToken)
}

// handleCryptoPayPayment –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ CryptoPay
func (b *Bot) handleCryptoPayPayment(query *tgbotapi.CallbackQuery, _ *models.User) error {
	text := "‚Çø *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CryptoPay*\n\n"
	text += "–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ CryptoPay –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
	text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã."

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "balance"),
		),
	)

	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, text, keyboard, b.config.BotToken)
}

// handleStartCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
func (b *Bot) handleStartCallback(query *tgbotapi.CallbackQuery, user *models.User) error {
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
	message := &tgbotapi.Message{
		Chat: query.Message.Chat,
		From: query.From,
	}

	return b.startHandler.Handle(message, user, "")
}

// handleUnknownCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (b *Bot) handleUnknownCommand(message *tgbotapi.Message, _ *models.User, _ string) error {
	text := "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
	return utils.SendMessage(message.Chat.ID, text, b.config.BotToken)
}

// setupHandlers –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤
func (b *Bot) setupHandlers() {
	// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	b.api.Use(b.authMiddleware.Handle)

	// –ö–æ–º–∞–Ω–¥—ã
	b.api.Handle("/start", b.handleStartCommand)
	b.api.Handle("/help", b.handleHelpCommand)

	// Callback queries
	b.api.Handle("\fbalance", b.handleBalanceCallback)
	b.api.Handle("\fstart", b.handleStartCallbackTelebot)

	// Text messages
	b.api.Handle(telebot.OnText, b.handleTextMessage)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è telebot (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
func (b *Bot) handleStartCommand(c telebot.Context) error {
	user := c.Get("user").(*models.User)
	message := &tgbotapi.Message{
		Chat: &tgbotapi.Chat{ID: c.Message().Chat.ID},
		From: &tgbotapi.User{ID: c.Message().Sender.ID},
	}
	return b.startHandler.Handle(message, user, "")
}

func (b *Bot) handleHelpCommand(c telebot.Context) error {
	user := c.Get("user").(*models.User)
	message := &tgbotapi.Message{
		Chat: &tgbotapi.Chat{ID: c.Message().Chat.ID},
		From: &tgbotapi.User{ID: c.Message().Sender.ID},
	}
	return b.helpHandler.Handle(message, user, "")
}

func (b *Bot) handleBalanceCallback(c telebot.Context) error {
	user := c.Get("user").(*models.User)
	query := &tgbotapi.CallbackQuery{
		Message: &tgbotapi.Message{Chat: &tgbotapi.Chat{ID: c.Message().Chat.ID}},
		From:    &tgbotapi.User{ID: c.Message().Sender.ID},
		Data:    c.Callback().Data,
	}
	return b.balanceHandler.Handle(query, user)
}

func (b *Bot) handleStartCallbackTelebot(c telebot.Context) error {
	user := c.Get("user").(*models.User)
	query := &tgbotapi.CallbackQuery{
		Message: &tgbotapi.Message{Chat: &tgbotapi.Chat{ID: c.Message().Chat.ID}},
		From:    &tgbotapi.User{ID: c.Message().Sender.ID},
		Data:    c.Callback().Data,
	}
	return b.handleStartCallback(query, user)
}

// handleSupport –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
func (b *Bot) handleSupport(query *tgbotapi.CallbackQuery, user *models.User) error {
	message := "üÜò **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n\n" +
		"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n\n" +
		"‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n" +
		"‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ\n" +
		"‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID: `" + fmt.Sprintf("%d", user.TelegramID) + "`\n\n" +
		"–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ! üöÄ"

	keyboard := b.createMainMenuKeyboard(user)
	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, message, keyboard, b.config.BotToken)
}

// handleLanguage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
func (b *Bot) handleLanguage(query *tgbotapi.CallbackQuery, user *models.User) error {
	message := "üåê **–í—ã–±–æ—Ä —è–∑—ã–∫–∞**\n\n" +
		"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.\n" +
		"–í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏."

	keyboard := b.createMainMenuKeyboard(user)
	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, message, keyboard, b.config.BotToken)
}

// handleStatus –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
func (b *Bot) handleStatus(query *tgbotapi.CallbackQuery, user *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	subscriptions, err := b.subscriptionService.GetActiveSubscriptions(user.ID)
	if err != nil {
		b.logger.Error("Failed to get user subscriptions", "error", err)
		subscriptions = []models.Subscription{}
	}

	message := "üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å**\n\n"
	message += fmt.Sprintf("üí∞ –ë–∞–ª–∞–Ω—Å: %.0f‚ÇΩ\n", user.Balance)
	message += fmt.Sprintf("üë§ Telegram ID: `%d`\n", user.TelegramID)
	message += fmt.Sprintf("üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: %s\n\n", user.CreatedAt.Format("02.01.2006"))

	if len(subscriptions) > 0 {
		message += "üîí **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:**\n"
		for _, sub := range subscriptions {
			message += fmt.Sprintf("‚Ä¢ %s (%s) - –¥–æ %s\n",
				sub.ServerName,
				sub.PlanName,
				sub.ExpiresAt.Format("02.01.2006 15:04"))
		}
	} else {
		message += "‚ùå **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫**\n"
		message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üöÄ –ö—É–ø–∏—Ç—å\" –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."
	}

	keyboard := b.createMainMenuKeyboard(user)
	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, message, keyboard, b.config.BotToken)
}

// handleReferrals –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
func (b *Bot) handleReferrals(query *tgbotapi.CallbackQuery, user *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	referrals, err := b.userService.GetReferrals(user.ID)
	if err != nil {
		b.logger.Error("Failed to get referrals", "error", err)
		referrals = []models.User{}
	}

	message := "üéÅ **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞**\n\n"
	message += fmt.Sprintf("–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: `%s`\n\n", user.ReferralCode)
	message += "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
	message += fmt.Sprintf("üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\n", len(referrals))

	if len(referrals) > 0 {
		message += "\n**–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:**\n"
		for i, ref := range referrals {
			if i >= 10 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 10
				message += fmt.Sprintf("... –∏ –µ—â–µ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n", len(referrals)-10)
				break
			}
			username := "–ë–µ–∑ –∏–º–µ–Ω–∏"
			if ref.Username != "" {
				username = "@" + ref.Username
			} else if ref.FirstName != "" {
				username = ref.FirstName
			}
			message += fmt.Sprintf("‚Ä¢ %s (ID: %d)\n", username, ref.TelegramID)
		}
	}

	keyboard := b.createMainMenuKeyboard(user)
	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, message, keyboard, b.config.BotToken)
}

// handleTrial –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
func (b *Bot) handleTrial(query *tgbotapi.CallbackQuery, user *models.User) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
	hasUsedTrial, err := b.subscriptionService.HasUsedTrial(user.ID)
	if err != nil {
		b.logger.Error("Failed to check trial usage", "error", err)
		message := "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."
		keyboard := b.createMainMenuKeyboard(user)
		return utils.SendMessageWithKeyboard(query.Message.Chat.ID, message, keyboard, b.config.BotToken)
	}

	if hasUsedTrial {
		message := "üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥**\n\n" +
			"–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n" +
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üöÄ –ö—É–ø–∏—Ç—å\" –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."
		keyboard := b.createMainMenuKeyboard(user)
		return utils.SendMessageWithKeyboard(query.Message.Chat.ID, message, keyboard, b.config.BotToken)
	}

	// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
	message := "üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥**\n\n" +
		"–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.\n" +
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üöÄ –ö—É–ø–∏—Ç—å\" –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."

	keyboard := b.createMainMenuKeyboard(user)
	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, message, keyboard, b.config.BotToken)
}

// handleAdminCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
func (b *Bot) handleAdminCallback(query *tgbotapi.CallbackQuery, user *models.User) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
	if !b.userService.IsAdmin(user.TelegramID) {
		message := "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
		keyboard := b.createMainMenuKeyboard(user)
		return utils.SendMessageWithKeyboard(query.Message.Chat.ID, message, keyboard, b.config.BotToken)
	}

	data := query.Data
	action := strings.TrimPrefix(data, "admin:")

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
	message := &tgbotapi.Message{
		Chat: &tgbotapi.Chat{ID: query.Message.Chat.ID},
		From: &tgbotapi.User{ID: query.From.ID},
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
	switch action {
	case "main":
		return b.adminHandler.Handle(message, user, "")
	case "stats":
		return b.adminHandler.Handle(message, user, "stats")
	case "users":
		return b.adminHandler.Handle(message, user, "users")
	case "find_user":
		return b.handleAdminFindUser(query, user)
	case "balance":
		return b.handleAdminBalance(query, user)
	case "promo":
		return b.handleAdminPromo(query, user)
	case "notify":
		return b.handleAdminNotify(query, user)
	case "logs":
		return b.handleAdminLogs(query, user)
	case "settings":
		return b.handleAdminSettings(query, user)
	default:
		message := "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"
		keyboard := b.adminHandler.GetAdminKeyboard().CreateMainMenu()
		return utils.SendMessageWithKeyboard(query.Message.Chat.ID, message, keyboard, b.config.BotToken)
	}
}

// handleAdminFindUser –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) handleAdminFindUser(query *tgbotapi.CallbackQuery, _ *models.User) error {
	message := "üîç *–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
	message += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:"

	keyboard := b.adminHandler.GetAdminKeyboard().CreateUserManagementMenu()
	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, message, keyboard, b.config.BotToken)
}

// handleAdminBalance –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º
func (b *Bot) handleAdminBalance(query *tgbotapi.CallbackQuery, _ *models.User) error {
	message := "üí∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º*\n\n"
	message += "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:"

	keyboard := b.adminHandler.GetAdminKeyboard().CreateBalanceMenu()
	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, message, keyboard, b.config.BotToken)
}

// handleAdminPromo –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
func (b *Bot) handleAdminPromo(query *tgbotapi.CallbackQuery, _ *models.User) error {
	message := "üéüÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏*\n\n"
	message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

	keyboard := b.adminHandler.GetAdminKeyboard().CreatePromoCodeMenu()
	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, message, keyboard, b.config.BotToken)
}

// handleAdminNotify –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (b *Bot) handleAdminNotify(query *tgbotapi.CallbackQuery, _ *models.User) error {
	message := "üì¢ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n\n"
	message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"

	keyboard := b.adminHandler.GetAdminKeyboard().CreateNotificationMenu()
	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, message, keyboard, b.config.BotToken)
}

// handleAdminLogs –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏
func (b *Bot) handleAdminLogs(query *tgbotapi.CallbackQuery, _ *models.User) error {
	message := "üìã *–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*\n\n"
	message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤:"

	keyboard := b.adminHandler.GetAdminKeyboard().CreateLogsMenu()
	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, message, keyboard, b.config.BotToken)
}

// handleAdminSettings –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
func (b *Bot) handleAdminSettings(query *tgbotapi.CallbackQuery, _ *models.User) error {
	message := "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
	message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:"

	keyboard := b.adminHandler.GetAdminKeyboard().CreateSettingsMenu()
	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, message, keyboard, b.config.BotToken)
}

func (b *Bot) handleTextMessage(c telebot.Context) error {
	user := c.Get("user").(*models.User)
	message := &tgbotapi.Message{
		Chat: &tgbotapi.Chat{ID: c.Message().Chat.ID},
		From: &tgbotapi.User{ID: c.Message().Sender.ID},
		Text: c.Message().Text,
	}
	return b.textHandler.Handle(message, user)
}
