package commands

import (
	"fmt"
	"remnawave-tg-shop/internal/bot/keyboards"
	"remnawave-tg-shop/internal/bot/utils"
	"remnawave-tg-shop/internal/config"
	"remnawave-tg-shop/internal/models"
	"remnawave-tg-shop/internal/services"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// AdminHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
type AdminHandler struct {
	config              *config.Config
	userService         services.UserService
	subscriptionService services.SubscriptionService
	paymentService      services.PaymentService
	promoCodeService    services.IPromoCodeService
	notificationService services.INotificationService
	activityLogService  services.IActivityLogService
	adminKeyboard       *keyboards.AdminMenuKeyboard
}

// NewAdminHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π AdminHandler
func NewAdminHandler(
	config *config.Config,
	userService services.UserService,
	subscriptionService services.SubscriptionService,
	paymentService services.PaymentService,
	promoCodeService services.IPromoCodeService,
	notificationService services.INotificationService,
	activityLogService services.IActivityLogService,
) *AdminHandler {
	return &AdminHandler{
		config:              config,
		userService:         userService,
		subscriptionService: subscriptionService,
		paymentService:      paymentService,
		promoCodeService:    promoCodeService,
		notificationService: notificationService,
		activityLogService:  activityLogService,
		adminKeyboard:       keyboards.NewAdminMenuKeyboard(),
	}
}

// Handle –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
func (h *AdminHandler) Handle(message *tgbotapi.Message, user *models.User, args string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
	if !h.userService.IsAdmin(user.TelegramID) {
		return utils.SendMessage(message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", h.config.BotToken)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
	h.activityLogService.LogCommand(user.ID, "admin", args, "", "")

	// –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
	parts := strings.Fields(args)
	if len(parts) == 0 {
		return h.showAdminMenu(message, user)
	}

	command := parts[0]
	commandArgs := strings.Join(parts[1:], " ")

	switch command {
	case "stats":
		return h.showStats(message, user)
	case "users":
		return h.showUsers(message, user, commandArgs)
	case "user":
		return h.showUser(message, user, commandArgs)
	case "block":
		return h.blockUser(message, user, commandArgs)
	case "unblock":
		return h.unblockUser(message, user, commandArgs)
	case "balance":
		return h.manageBalance(message, user, commandArgs)
	case "promo":
		return h.managePromoCodes(message, user, commandArgs)
	case "notify":
		return h.sendNotification(message, user, commandArgs)
	case "logs":
		return h.showLogs(message, user, commandArgs)
	case "help":
		return h.showAdminHelp(message, user)
	default:
		return h.showAdminMenu(message, user)
	}
}

// showAdminMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
func (h *AdminHandler) showAdminMenu(message *tgbotapi.Message, _ *models.User) error {
	text := "üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
	text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:"

	keyboard := h.adminKeyboard.CreateMainMenu()
	return utils.SendMessageWithKeyboard(message.Chat.ID, text, keyboard, h.config.BotToken)
}

// showStats –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (h *AdminHandler) showStats(message *tgbotapi.Message, _ *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö)
	text := "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
	text += "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 0\n"
	text += "üîí –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: 0\n"
	text += "üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: 0‚ÇΩ\n"
	text += "üìà –í—ã—Ä—É—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è: 0‚ÇΩ\n"
	text += "üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã: 0\n"
	text += "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: 0"

	return utils.SendMessage(message.Chat.ID, text, h.config.BotToken)
}

// showUsers –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (h *AdminHandler) showUsers(message *tgbotapi.Message, _ *models.User, searchQuery string) error {
	text := "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"

	if searchQuery != "" {
		text += fmt.Sprintf("–ü–æ–∏—Å–∫: %s\n\n", searchQuery)
		// –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		text += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –±—É–¥—É—Ç –∑–¥–µ—Å—å..."
	} else {
		text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
		// –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		text += "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç –∑–¥–µ—Å—å..."
	}

	return utils.SendMessage(message.Chat.ID, text, h.config.BotToken)
}

// showUser –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
func (h *AdminHandler) showUser(message *tgbotapi.Message, _ *models.User, userIDStr string) error {
	if userIDStr == "" {
		return utils.SendMessage(message.Chat.ID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", h.config.BotToken)
	}

	userID, err := strconv.ParseInt(userIDStr, 10, 64)
	if err != nil {
		return utils.SendMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", h.config.BotToken)
	}

	targetUser, err := h.userService.GetUser(userID)
	if err != nil {
		return utils.SendMessage(message.Chat.ID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", h.config.BotToken)
	}

	text := "üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n"
	text += fmt.Sprintf("üÜî ID: %d\n", targetUser.TelegramID)
	text += fmt.Sprintf("üë§ –ò–º—è: %s\n", targetUser.GetFullName())
	text += fmt.Sprintf("üì± Username: @%s\n", targetUser.Username)
	text += fmt.Sprintf("üåê –Ø–∑—ã–∫: %s\n", targetUser.LanguageCode)
	text += fmt.Sprintf("üí∞ –ë–∞–ª–∞–Ω—Å: %.2f‚ÇΩ\n", targetUser.Balance)
	text += fmt.Sprintf("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: %s\n", targetUser.ReferralCode)
	text += fmt.Sprintf("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: %t\n", targetUser.IsBlocked)
	text += fmt.Sprintf("üëë –ê–¥–º–∏–Ω: %t\n", targetUser.IsAdmin)
	text += fmt.Sprintf("üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: %s\n", targetUser.CreatedAt.Format("02.01.2006 15:04"))

	return utils.SendMessage(message.Chat.ID, text, h.config.BotToken)
}

// blockUser –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *AdminHandler) blockUser(message *tgbotapi.Message, user *models.User, userIDStr string) error {
	if userIDStr == "" {
		return utils.SendMessage(message.Chat.ID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", h.config.BotToken)
	}

	userID, err := strconv.ParseInt(userIDStr, 10, 64)
	if err != nil {
		return utils.SendMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", h.config.BotToken)
	}

	if err := h.userService.BlockUser(userID); err != nil {
		return utils.SendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", h.config.BotToken)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
	h.activityLogService.LogActivity(user.ID, "admin_action", map[string]interface{}{
		"action":         "block_user",
		"target_user_id": userID,
	}, "", "")

	return utils.SendMessage(message.Chat.ID, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", h.config.BotToken)
}

// unblockUser —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *AdminHandler) unblockUser(message *tgbotapi.Message, user *models.User, userIDStr string) error {
	if userIDStr == "" {
		return utils.SendMessage(message.Chat.ID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", h.config.BotToken)
	}

	userID, err := strconv.ParseInt(userIDStr, 10, 64)
	if err != nil {
		return utils.SendMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", h.config.BotToken)
	}

	if err := h.userService.UnblockUser(userID); err != nil {
		return utils.SendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", h.config.BotToken)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
	h.activityLogService.LogActivity(user.ID, "admin_action", map[string]interface{}{
		"action":         "unblock_user",
		"target_user_id": userID,
	}, "", "")

	return utils.SendMessage(message.Chat.ID, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", h.config.BotToken)
}

// manageBalance —É–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *AdminHandler) manageBalance(message *tgbotapi.Message, user *models.User, args string) error {
	parts := strings.Fields(args)
	if len(parts) < 2 {
		return utils.SendMessage(message.Chat.ID, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin balance <id> <—Å—É–º–º–∞>", h.config.BotToken)
	}

	userID, err := strconv.ParseInt(parts[0], 10, 64)
	if err != nil {
		return utils.SendMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", h.config.BotToken)
	}

	amount, err := strconv.ParseFloat(parts[1], 64)
	if err != nil {
		return utils.SendMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã", h.config.BotToken)
	}

	targetUser, err := h.userService.GetUser(userID)
	if err != nil {
		return utils.SendMessage(message.Chat.ID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", h.config.BotToken)
	}

	var text string
	if amount > 0 {
		if err := h.userService.AddBalance(targetUser.ID, amount); err != nil {
			return utils.SendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞", h.config.BotToken)
		}
		text = fmt.Sprintf("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ %.2f‚ÇΩ", amount)
	} else {
		amount = -amount // –î–µ–ª–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è
		if err := h.userService.SubtractBalance(targetUser.ID, amount); err != nil {
			return utils.SendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å –±–∞–ª–∞–Ω—Å–∞", h.config.BotToken)
		}
		text = fmt.Sprintf("‚úÖ –° –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∏—Å–∞–Ω–æ %.2f‚ÇΩ", amount)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
	h.activityLogService.LogActivity(user.ID, "admin_action", map[string]interface{}{
		"action":         "manage_balance",
		"target_user_id": userID,
		"amount":         amount,
	}, "", "")

	return utils.SendMessage(message.Chat.ID, text, h.config.BotToken)
}

// managePromoCodes —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
func (h *AdminHandler) managePromoCodes(message *tgbotapi.Message, _ *models.User, _ string) error {
	text := "üéüÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏*\n\n"
	text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
	text += "‚Ä¢ `/admin promo create <–∫–æ–¥> <—Ç–∏–ø> <–∑–Ω–∞—á–µ–Ω–∏–µ> <–º–∞–∫—Å_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π>` - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
	text += "‚Ä¢ `/admin promo list` - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
	text += "‚Ä¢ `/admin promo delete <id>` - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n\n"
	text += "–¢–∏–ø—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n"
	text += "‚Ä¢ `bonus_days` - –ë–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏\n"
	text += "‚Ä¢ `discount_percent` - –°–∫–∏–¥–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö\n"
	text += "‚Ä¢ `discount_amount` - –°–∫–∏–¥–∫–∞ –≤ —Ä—É–±–ª—è—Ö"

	return utils.SendMessage(message.Chat.ID, text, h.config.BotToken)
}

// sendNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
func (h *AdminHandler) sendNotification(message *tgbotapi.Message, user *models.User, notificationText string) error {
	if notificationText == "" {
		return utils.SendMessage(message.Chat.ID, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", h.config.BotToken)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
	if err := h.notificationService.SendBulkNotification("admin_message", "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", notificationText, h.config.BotToken); err != nil {
		return utils.SendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", h.config.BotToken)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
	h.activityLogService.LogActivity(user.ID, "admin_action", map[string]interface{}{
		"action":  "send_notification",
		"message": notificationText,
	}, "", "")

	return utils.SendMessage(message.Chat.ID, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", h.config.BotToken)
}

// showLogs –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
func (h *AdminHandler) showLogs(message *tgbotapi.Message, _ *models.User, userIDStr string) error {
	text := "üìã *–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*\n\n"

	if userIDStr != "" {
		text += fmt.Sprintf("–õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s:\n\n", userIDStr)
		// –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		text += "–õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥—É—Ç –∑–¥–µ—Å—å..."
	} else {
		text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:\n\n"
		// –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤
		text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±—É–¥—É—Ç –∑–¥–µ—Å—å..."
	}

	return utils.SendMessage(message.Chat.ID, text, h.config.BotToken)
}

// showAdminHelp –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º
func (h *AdminHandler) showAdminHelp(message *tgbotapi.Message, _ *models.User) error {
	text := "‚ùì *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º*\n\n"
	text += "üîß *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
	text += "`/admin` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏\n"
	text += "`/admin stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
	text += "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:*\n"
	text += "`/admin users` - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
	text += "`/admin users <–ø–æ–∏—Å–∫>` - –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
	text += "`/admin user <id>` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
	text += "`/admin block <id>` - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
	text += "`/admin unblock <id>` - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
	text += "üí∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º:*\n"
	text += "`/admin balance <id> <—Å—É–º–º–∞>` - –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
	text += "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è - —Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
	text += "üéüÔ∏è *–ü—Ä–æ–º–æ–∫–æ–¥—ã:*\n"
	text += "`/admin promo` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏\n\n"
	text += "üì¢ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n"
	text += "`/admin notify <—Å–æ–æ–±—â–µ–Ω–∏–µ>` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º\n\n"
	text += "üìã *–õ–æ–≥–∏:*\n"
	text += "`/admin logs` - –í—Å–µ –ª–æ–≥–∏\n"
	text += "`/admin logs <id>` - –õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

	return utils.SendMessage(message.Chat.ID, text, h.config.BotToken)
}

// GetAdminKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
func (h *AdminHandler) GetAdminKeyboard() *keyboards.AdminMenuKeyboard {
	return h.adminKeyboard
}
