package callbacks

import (
	"fmt"
	"remnawave-tg-shop/internal/bot/keyboards"
	"remnawave-tg-shop/internal/bot/utils"
	"remnawave-tg-shop/internal/config"
	"remnawave-tg-shop/internal/models"
	"remnawave-tg-shop/internal/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// BalanceHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
type BalanceHandler struct {
	config      *config.Config
	userService services.UserService
}

// NewBalanceHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π BalanceHandler
func NewBalanceHandler(config *config.Config, userService services.UserService) *BalanceHandler {
	return &BalanceHandler{
		config:      config,
		userService: userService,
	}
}

// Handle –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
func (h *BalanceHandler) Handle(query *tgbotapi.CallbackQuery, user *models.User) error {
	text := fmt.Sprintf("üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: %.0f‚ÇΩ\n\n", user.Balance)
	text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Ç–æ–¥–∞–º–∏ –æ–ø–ª–∞—Ç—ã
	keyboard := h.createPaymentKeyboard()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	return utils.SendMessageWithKeyboard(query.Message.Chat.ID, text, keyboard, h.config.BotToken)
}

// createPaymentKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Ç–æ–¥–∞–º–∏ –æ–ø–ª–∞—Ç—ã
func (h *BalanceHandler) createPaymentKeyboard() tgbotapi.InlineKeyboardMarkup {
	var keyboardRows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
	keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "start"),
	})

	// –ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
	if h.config.Payments.StarsEnabled {
		keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("‚≠ê Telegram Stars", "payment_stars"),
		})
	}

	if h.config.Payments.TributeEnabled {
		keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üíé Tribute", "payment_tribute"),
		})
	}

	if h.config.Payments.YooKassaEnabled {
		keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ÆKassa", "payment_yookassa"),
		})
	}

	if h.config.Payments.CryptoPayEnabled {
		keyboardRows = append(keyboardRows, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("‚Çø CryptoPay", "payment_cryptopay"),
		})
	}

	return tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)
}
