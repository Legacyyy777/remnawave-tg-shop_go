package callbacks

import (
	"fmt"
	"remnawave-tg-shop/internal/bot/utils"
	"remnawave-tg-shop/internal/config"
	"remnawave-tg-shop/internal/models"
	"remnawave-tg-shop/internal/services"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/google/uuid"
)

// PromoCodeHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
type PromoCodeHandler struct {
	config             *config.Config
	userService        services.UserService
	promoCodeService   services.IPromoCodeService
	activityLogService services.IActivityLogService
}

// NewPromoCodeHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π PromoCodeHandler
func NewPromoCodeHandler(
	config *config.Config,
	userService services.UserService,
	promoCodeService services.IPromoCodeService,
	activityLogService services.IActivityLogService,
) *PromoCodeHandler {
	return &PromoCodeHandler{
		config:             config,
		userService:        userService,
		promoCodeService:   promoCodeService,
		activityLogService: activityLogService,
	}
}

// Handle –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
func (h *PromoCodeHandler) Handle(query *tgbotapi.CallbackQuery, user *models.User) error {
	data := query.Data

	// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback'–∞
	parts := strings.Split(data, ":")
	if len(parts) < 2 {
		return h.showPromoCodeMenu(query, user)
	}

	action := parts[1]

	switch action {
	case "menu":
		return h.showPromoCodeMenu(query, user)
	case "apply":
		if len(parts) < 3 {
			return h.showPromoCodeInput(query, user)
		}
		code := parts[2]
		return h.applyPromoCode(query, user, code)
	case "input":
		return h.showPromoCodeInput(query, user)
	default:
		return h.showPromoCodeMenu(query, user)
	}
}

// showPromoCodeMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
func (h *PromoCodeHandler) showPromoCodeMenu(query *tgbotapi.CallbackQuery, user *models.User) error {
	text := "üéüÔ∏è *–ü—Ä–æ–º–æ–∫–æ–¥—ã*\n\n"
	text += "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤!\n\n"
	text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n"
	text += "‚Ä¢ üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
	text += "‚Ä¢ üí∞ –°–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É\n"
	text += "‚Ä¢ üéØ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
	text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥:"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", "promo_code:input"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "start"),
		),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewEditMessageText(query.Message.Chat.ID, query.Message.MessageID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &keyboard

	bot, err := tgbotapi.NewBotAPI(h.config.BotToken)
	if err != nil {
		return err
	}

	_, err = bot.Send(msg)
	return err
}

// showPromoCodeInput –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
func (h *PromoCodeHandler) showPromoCodeInput(query *tgbotapi.CallbackQuery, user *models.User) error {
	text := "üìù *–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞*\n\n"
	text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
	text += "–ü—Ä–∏–º–µ—Ä: `PROMO2024` –∏–ª–∏ `BONUS50`\n\n"
	text += "‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º", "promo_code:menu"),
		),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewEditMessageText(query.Message.Chat.ID, query.Message.MessageID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &keyboard

	bot, err := tgbotapi.NewBotAPI(h.config.BotToken)
	if err != nil {
		return err
	}

	_, err = bot.Send(msg)
	return err
}

// applyPromoCode –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
func (h *PromoCodeHandler) applyPromoCode(query *tgbotapi.CallbackQuery, user *models.User, code string) error {
	// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
	h.activityLogService.LogPromoCode(user.ID, uuid.Nil, code, "", "")

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
	promoCode, err := h.promoCodeService.ApplyPromoCode(user.ID, code)
	if err != nil {
		text := "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞*\n\n"
		text += fmt.Sprintf("–ü—Ä–∏—á–∏–Ω–∞: %s\n\n", err.Error())
		text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "promo_code:input"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "start"),
			),
		)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		msg := tgbotapi.NewEditMessageText(query.Message.Chat.ID, query.Message.MessageID, text)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = &keyboard

		bot, err := tgbotapi.NewBotAPI(h.config.BotToken)
		if err != nil {
			return err
		}

		_, err = bot.Send(msg)
		return err
	}

	// –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω
	text := "‚úÖ *–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!*\n\n"
	text += fmt.Sprintf("üéüÔ∏è –ö–æ–¥: `%s`\n", promoCode.Code)
	text += fmt.Sprintf("üìù –¢–∏–ø: %s\n", promoCode.GetTypeText())
	text += fmt.Sprintf("üíé –ó–Ω–∞—á–µ–Ω–∏–µ: %.2f\n", promoCode.Value)

	if promoCode.Description != "" {
		text += fmt.Sprintf("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: %s\n", promoCode.Description)
	}

	text += "\nüéâ –ë–æ–Ω—É—Å –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üéüÔ∏è –ï—â–µ –ø—Ä–æ–º–æ–∫–æ–¥", "promo_code:input"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewEditMessageText(query.Message.Chat.ID, query.Message.MessageID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &keyboard

	bot, err := tgbotapi.NewBotAPI(h.config.BotToken)
	if err != nil {
		return err
	}

	_, err = bot.Send(msg)
	return err
}

// HandlePromoCodeMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
func (h *PromoCodeHandler) HandlePromoCodeMessage(message *tgbotapi.Message, user *models.User) error {
	code := strings.TrimSpace(message.Text)

	// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
	h.activityLogService.LogPromoCode(user.ID, uuid.Nil, code, "", "")

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
	promoCode, err := h.promoCodeService.ApplyPromoCode(user.ID, code)
	if err != nil {
		text := "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞*\n\n"
		text += fmt.Sprintf("–ü—Ä–∏—á–∏–Ω–∞: %s\n\n", err.Error())
		text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
		text += "–î–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /promo"

		return utils.SendMessage(message.Chat.ID, text, h.config.BotToken)
	}

	// –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω
	text := "‚úÖ *–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!*\n\n"
	text += fmt.Sprintf("üéüÔ∏è –ö–æ–¥: `%s`\n", promoCode.Code)
	text += fmt.Sprintf("üìù –¢–∏–ø: %s\n", promoCode.GetTypeText())
	text += fmt.Sprintf("üíé –ó–Ω–∞—á–µ–Ω–∏–µ: %.2f\n", promoCode.Value)

	if promoCode.Description != "" {
		text += fmt.Sprintf("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: %s\n", promoCode.Description)
	}

	text += "\nüéâ –ë–æ–Ω—É—Å –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!"

	return utils.SendMessage(message.Chat.ID, text, h.config.BotToken)
}
